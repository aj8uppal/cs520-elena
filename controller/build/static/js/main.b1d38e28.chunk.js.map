{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","points","setPoints","undefined","drawRoutes","setDrawRoutes","form","useRef","useEffect","loadCss","loadModules","version","css","then","esriConfig","Map","FeatureLayer","GraphicsLayer","SceneView","ElevationLayer","Graphic","Polyline","BaseElevationLayer","LabelClass","Basemap","Point","TileLayer","apiKey","source","map","place","attributes","ObjectId","id","address","label","geometry","longitude","latitude","symbol","type","color","outline","width","popupTemplate","title","content","fieldInfos","fieldName","visible","renderer","objectIdField","fields","name","alias","sym","style","grL","elevationLayer","createSubclass","properties","exaggeration","load","this","_elevation","url","addResolvingPromise","fetchTile","level","row","col","options","data","i","values","length","bind","basemap","baseLayers","ground","layers","view","container","qualityProfile","camera","position","heading","tilt","dr","routes","start_point","end_point","ind","symb","add","pths","push","polylineGraphic","paths","currGraphic","currGeometry","trails","elevationInfo","mode","offset","symbolLayers","material","size","trailHeads","resource","primitive","verticalOffset","screenLength","maxWorldLength","minWorldLength","callout","labelingInfo","labelExpressionInfo","expression","halo","font","family","on","e","stopPropagation","p","toMap","action","graphics","remove","x","y","z","spatialReference","wkid","console","log","mapPoint","geo","prev","removeAll","addMany","catch","err","error","ref","onSubmit","preventDefault","axios","post","start","end","res","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1d38e28.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\n// by default loadCss() loads styles for the latest 4.x version\n\nimport MapVis from './Components/Map.js';\n\nimport { loadModules , loadCss} from 'esri-loader';\n\n\n\n\n\nfunction App() {\n  // const [status, setStatus] = useState(\"start\");\n  // const [start, setStart] = useState([]);\n  // const [end, setEnd] = useState([]);\n  const [points, setPoints] = useState([]);\n  const [drawRoutes, setDrawRoutes] = useState(undefined);\n  const form = useRef(null);\n  // const [route, setRoute] = useState([]);\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n      axios.post('/compute_shortest_path', {\n        start: {\n          \"latitude\": points[0][0],\n          \"longitude\": points[0][1]\n        },\n        end: {\n          \"latitude\": points[1][0],\n          \"longitude\": points[1][1]\n        }\n      }).then(res => {\n        // alert(`Your route is: ${res.data}`);\n        // setRoute(res.data);\n        // loadModules(['esri/views/MapView', 'esri/WebMap'])\n        // .then(([MapView, WebMap]) => {\n          // the styles, script, and modules have all been loaded (in that order)\n          for(let i = 0; i < res.data.length; i++){\n            drawRoutes(res.data[i], [points[0][0], points[0][1]], [points[1][0], points[1][1]], i);\n          }\n        // });\n      })\n  }\n\n\n  useEffect( () => {\n    if(!form){\n      return;\n    }\n    loadCss(\"4.21\");\n\n    // configure esri-loader to use version 3.38\n    // and the CSS for that version from the ArcGIS CDN\n    const options = { version: '4.21', css: true };\n\n    loadModules([\n            \"esri/config\",\n            \"esri/Map\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/GraphicsLayer\",\n            \"esri/views/SceneView\",\n            \"esri/WebScene\",\n            \"esri/layers/ElevationLayer\",\n            \"esri/widgets/Sketch/SketchViewModel\",\n            \"esri/Graphic\",\n            \"esri/geometry/Polyline\",\n            \"esri/layers/BaseElevationLayer\",\n            \"esri/layers/support/LabelClass\",\n            \"esri/Basemap\",\n            \"esri/geometry/Point\",\n            \"esri/layers/TileLayer\"], options)\n      .then(([esriConfig, Map, FeatureLayer, GraphicsLayer, SceneView, WebScene, ElevationLayer, SketchViewModel, Graphic, Polyline, BaseElevationLayer, LabelClass, Basemap, Point, TileLayer]) => {\n        esriConfig.apiKey = 'AAPK4e870b84de1741d3933f19c0e4a079c62hgfr2QWI1X2cyUmJgaMTrOUp2cY79xTNnPZjdlltlZBfdAJnTXjRSZgqVeG6dq7';\n\n        const places = [\n            {\n              \"id\": 1,\n              \"address\": \"650 N Pleasant St, Amherst, MA 01003\",\n              \"longitude\": -72.52587088060791,\n              \"latitude\": 42.390934188741205,\n              \"label\": \"Integrative Learning Center\"\n            }\n          ];\n\n        const graphics = places.map(function (place) {\n          return new Graphic({\n            attributes: {\n              ObjectId: place.id,\n              address: place.address,\n              label: place.label\n            },\n            geometry: new Point({\n              longitude: place.longitude,\n              latitude: place.latitude\n            }),\n            symbol: {\n              type: \"simple-marker\",             // autocasts as new SimpleMarkerSymbol()\n              color: [ 226, 119, 40 ],\n              outline: {                         // autocasts as SimpleLineSymbol()\n                color: [ 255, 255, 255 ],\n                width: 2\n              }\n            },\n            popupTemplate: {                     // autocasts as new PopupTemplate()\n              title: \"Places in Los Angeles\",\n              content: [{\n                type: \"fields\",\n                fieldInfos: [\n                  {\n                    fieldName: \"label\",\n                    label: \"Name\",\n                    visible: true\n                  },\n                  {\n                    fieldName: \"address\",\n                    label: \"Address\",\n                    visible: true\n                  }\n                ]\n              }]\n            }\n          });\n        });\n\n\n\n\n        const labelFeatureLayer = new FeatureLayer({\n          source: graphics,\n          renderer: {\n            type: \"simple\",                    // autocasts as new SimpleRenderer()\n            symbol: {                          // autocasts as new SimpleMarkerSymbol()\n              type: \"simple-marker\",\n              color: \"#102A44\",\n              outline: {                       // autocasts as new SimpleLineSymbol()\n                color: \"#598DD8\",\n                width: 2\n              }\n            }\n          },\n          popupTemplate: {                     // autocasts as new PopupTemplate()\n            title: \"Places in Los Angeles\",\n            content: [{\n              type: \"fields\",\n              fieldInfos: [\n                {\n                  fieldName: \"address\",\n                  label: \"Address\",\n                  visible: true\n                },\n                  {\n                    fieldName: \"label\",\n                    label: \"Label\",\n                    visible: true\n                  }\n              ]\n            }]\n          },\n          objectIdField: \"ObjectID\",           // This must be defined when creating a layer from `Graphic` objects\n          fields: [\n            {\n              name: \"ObjectID\",\n              alias: \"ObjectID\",\n              type: \"oid\"\n            },\n            {\n              name: \"address\",\n              alias: \"address\",\n              type: \"string\"\n            },\n            {\n              name: \"label\",\n              alias: \"label\",\n              type: \"string\"\n            }\n          ]\n        });\n\n\n\n        const sym = { // symbol used for polylines\n          type: \"simple-line\", // autocasts as new SimpleMarkerSymbol()\n          color: \"#8A2BE2\",\n          width: \"4\",\n          style: \"dash\"\n        }\n\n        const grL = new GraphicsLayer();\n        const ExaggeratedElevationLayer = BaseElevationLayer.createSubclass({\n\n          properties: {\n            exaggeration: null\n          },\n\n          // The load() method is called when the layer is added to the map\n          // prior to it being rendered in the view.\n          load: function () {\n            this._elevation = new ElevationLayer({\n              url:\n                \"https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/TopoBathy3D/ImageServer\"\n            });\n\n            // wait for the elevation layer to load before resolving load()\n            this.addResolvingPromise(this._elevation.load());\n          },\n\n          // Fetches the tile(s) visible in the view\n          fetchTile: function (level, row, col, options) {\n            // calls fetchTile() on the elevationlayer for the tiles\n            // visible in the view\n            return this._elevation.fetchTile(level, row, col, options).then(\n              function (data) {\n                var exaggeration = this.exaggeration;\n                // `data` is an object that contains the\n                // the width and the height of the tile in pixels,\n                // and the values of each pixel\n                for (var i = 0; i < data.values.length; i++) {\n                  // Multiply the given pixel value\n                  // by the exaggeration value\n                  data.values[i] = data.values[i] * exaggeration;\n                }\n\n                return data;\n              }.bind(this)\n            );\n          }\n        });\n\n        const elevationLayer = new ExaggeratedElevationLayer({ exaggeration: 8 });\n        const basemap = new Basemap({\n               baseLayers: [\n                  new TileLayer({\n                    url: \"https://wtb.maptiles.arcgis.com/arcgis/rest/services/World_Topo_Base/MapServer\"\n                  })\n                ]\n            });\n\n\n            const map = new Map({\n              ground: {\n                layers: [ new ElevationLayer({\n                  url: \"https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer\"\n                }), elevationLayer]\n              },\n              basemap: basemap\n            });\n\n\n            const view = new SceneView({\n              container: \"viewDiv\",\n              map: map,\n              qualityProfile: \"high\",\n              camera: {\n                position: [\n                  -72.525387,\n                  42.364154,\n                  1000\n                ],\n                heading: 0.51,\n                tilt: 75\n              }\n            });\n\n\n            const dr = (routes, start_point, end_point, ind) => {\n              const symb = [{\n                type: \"simple-line\",\n                color: [234, 181, 67, 0.65], // Orange\n                width: 4\n             },\n               {\n                 type: \"simple-line\",\n                 color: [88, 177, 159, 0.65], // Orange\n                 width: 4\n              }, {\n                  type: \"simple-line\",\n                  color: [130, 88, 159, 0.65], // Orange\n                  width: 4\n               }, {\n                 type: \"simple-line\",\n                 color: [24, 44, 97,0.65], // Orange\n                 width: 4\n              }][ind];\n              map.add(grL);\n              // let pths = [start_point[1], start_point[0]];\n              let pths = [];\n              // debugger;\n              // for(let j = 0; j < all_routes.length - 1; j++){\n                // let routes = all_routes[j];\n                routes = [[start_point[1], start_point[0]], ...routes, [end_point[1], end_point[0]]];\n                for(let i = 0; i < routes.length; i++){\n                  // let point = new Point({latitude: pt[0], longitude: pt[1]});\n                  pths.push(routes[i]);\n                  // p\n                }\n                const polyline = {\n                  type: \"polyline\",\n                  paths: pths\n                }\n                // console.log(symbs[j]);\n               const polylineGraphic = new Graphic({\n                  geometry: polyline,\n                  symbol: symb\n               });\n               grL.add(polylineGraphic);\n             // }\n              // let currGeometry;\n              // let currGraphic;\n              // let sym = { // symbol used for polylines\n              //   type: \"simple-line\", // autocasts as new SimpleMarkerSymbol()\n              //   color: \"#8A2BE2\",\n              //   width: \"4\",\n              //   style: \"dash\"\n              // }\n              // for(let i = 0; i < routes.length; i++){\n              //   let pt = routes[i];\n              //   let point = new Point({latitude: pt[0], longitude: pt[1]});\n              //   let mappedPoint = view.toScreen({\n              //     x: pt[0],\n              //     y: pt[1],\n              //     spatialReference: { wkid: 102100 }\n              //   });\n              //   // debugger;\n              //   // debugger;\n              //   if(i === 0){\n              //     currGeometry = new Polyline({\n              //         paths: [\n              //           [mappedPoint.x, mappedPoint.y]\n              //         ],\n              //         spatialReference: { wkid: 102100 }\n              //     });\n              //   }else{\n              //     currGeometry.\n              //   }\n              //\n              // }\n              // currGraphic = new Graphic({\n              //     geometry: currGeometry,\n              //     symbol: sym\n              // });\n              // // console.log(view);\n              // view.graphics.add(currGraphic);\n              // setTimeout( () => {\n              //   debugger;\n              // }, 1500);\n              // debugger;\n              // debugger;\n            }\n\n            // const callback = (e) => {\n            //     e.preventDefault();\n            //     axios.post('/compute_shortest_path', {\n            //       start: {\n            //         \"latitude\": points[0][0],\n            //         \"longitude\": points[0][1]\n            //       },\n            //       end: {\n            //         \"latitude\": points[1][0],\n            //         \"longitude\": points[1][1]\n            //       }\n            //     }).then(res => {\n            //       // alert(`Your route is: ${res.data}`);\n            //       // setRoute(res.data);\n            //       drawRoutes(res.data);\n            //     })\n            // }\n            //\n            // form.current.addEventListener(\"submit\", callback, false);\n            // let routes = [\n                  // [\n                  //   -72.5227291,\n                  //   42.3912163\n                  // ],\n                  // [\n                  //   -72.5196917,\n                  //   42.3906095\n                  // ],\n                  // [\n                  //   -72.5187923,\n                  //   42.3890381\n                  // ]];\n          // drawRoutes(routes);\n          setDrawRoutes(()=>dr);\n\n\n\n            // view.goTo({\n            //   center: [42.3909, -72.5257]\n            // })\n            // .catch(function(error) {\n            //   if (error.name != \"AbortError\") {\n            //      console.error(error);\n            //   }\n            // });\n\n\n            const trails = new FeatureLayer({\n              url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trails/FeatureServer/0\",\n              elevationInfo: {\n                mode: \"relative-to-ground\",\n                offset: 3\n              },\n\n              renderer: {\n                type: \"simple\",\n                symbol: {\n                  type: \"line-3d\",\n                  symbolLayers: [{\n                    type: \"line\",\n                    material: { color: \"#FF5500\" },\n                    size: \"2px\"\n                  }]\n                }\n              }\n            });\n\n            const trailHeads = new FeatureLayer({\n              url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0\",\n              elevationInfo: {\n                mode: \"relative-to-ground\"\n              },\n              renderer: {\n                type: \"simple\",\n                symbol: {\n                  type: \"point-3d\",\n                  symbolLayers: [{\n                    type: \"icon\",\n                    resource: { primitive: \"circle\"},\n                    material: { color: \"#FF5500\" },\n                    outline: { color: \"#FFFFFF\", size: 1 },\n                    size: \"10px\"\n                  }],\n                  verticalOffset: {\n                    screenLength: 20,\n                    maxWorldLength: 200,\n                    minWorldLength: 20\n                  },\n                  callout: {\n                    type: \"line\",\n                    size: 1,\n                    color: \"#FFFFFF\"\n                  }\n                }\n              },\n              labelingInfo: [\n                new LabelClass({\n                  labelExpressionInfo: { expression: \"$feature.TRL_NAME\"},\n                  symbol: {\n                    type: \"label-3d\",\n                    symbolLayers: [{\n                      type: \"text\",\n                      material: {\n                        color: \"#FFFFFF\"\n                      },\n                      halo: {\n                        size:  1,\n                        color: [0, 0, 0, 0.5]\n                      },\n                      font: {\n                        size:  11,\n                        family: \"sans-serif\"\n                      }\n                    }]\n                  }\n                })\n              ]\n            });\n\n            let currGraphic;\n            let currGeometry;\n            view.on('drag', [\"Shift\"], e => {\n              e.stopPropagation();\n              let p = view.toMap(e);\n              if (e.action === \"start\") {\n                if (currGraphic) {\n                  view.graphics.remove(currGraphic);\n                }\n\n                currGeometry = new Polyline({\n                  paths: [\n                    [p.x, p.y, p.z]\n                  ],\n                  spatialReference: { wkid: 102100 }\n                });\n\n                currGraphic = new Graphic({\n                  geometry: currGeometry,\n                  symbol: sym\n                });\n\n              } else {\n                if (currGraphic) {\n                  view.graphics.remove(currGraphic);\n                }\n                currGeometry.paths[0].push([p.x, p.y, p.z]);\n                currGraphic = new Graphic({\n                  geometry: currGeometry,\n                  symbol: sym\n                });\n                console.log(currGeometry.paths);\n                view.graphics.add(currGraphic);\n              }\n            })\n            view.on('click', e => {\n              // console.log(start);\n              // console.log(end);\n              // console.log(e.mapPoint);\n              // e.stopPropagation();\n              // let mp = e.mapPoint;\n              // mp.initialize();\n              // let p = view.toMap(e);\n              let { latitude, longitude } = e.mapPoint;\n              // alert(status);\n\n\n              let geo = new Graphic(\n                {\n                  geometry: new Point({\n                  longitude: longitude,\n                  latitude: latitude\n                }),\n                symbol: {\n                  type: \"simple-marker\",             // autocasts as new SimpleMarkerSymbol()\n                  color: [ 226, 119, 40 ],\n                  outline: {                         // autocasts as SimpleLineSymbol()\n                    color: [ 255, 255, 255 ],\n                    width: 2\n                  }\n                }\n              });\n              setPoints(prev => {\n                if(prev.length < 2){\n                  return [...prev, [latitude, longitude]];\n                }else{\n                  view.graphics.removeAll();\n                  // debugger;\n                  grL.graphics.removeAll()\n                  return [[latitude, longitude]];\n                }\n              });\n\n              view.graphics.add(geo);\n              // if(!start.length){\n              //   // setStatus(\"end\");\n              //   setStart([latitude, longitude]);\n              // }else if(!end.length){\n              //   // setStatus(\"ready\");\n              //   setEnd([latitude, longitude]);\n              // }else{\n              //   // setStatus(\"start\");\n              //   setStart([latitude, longitude]);\n              //   setEnd([]);\n              // }\n              // if ( !start.length ){\n              //   setStatus(\"end\");\n              // }else if( !end.length ){\n              //   setStatus(\"ready\");\n              //   setEnd([latitude, longitude]);\n              // }else {\n              //   setStart([latitude, longitude]);\n              //   setEnd([]);\n              // }\n              // debugger;\n              // console.log(e.mapPoint);\n              // let p = view.toMap(e);\n              // if (e.action === \"start\") {\n              //   if (currGraphic) {\n              //     view.graphics.remove(currGraphic);\n              //   }\n              //\n              //   currGeometry = new Polyline({\n              //     paths: [\n              //       [p.x, p.y, p.z]\n              //     ],\n              //     spatialReference: { wkid: 102100 }\n              //   });\n              //\n              //   currGraphic = new Graphic({\n              //     geometry: currGeometry,\n              //     symbol: sym\n              //   });\n              //\n              // } else {\n              //   if (currGraphic) {\n              //     view.graphics.remove(currGraphic);\n              //   }\n              //   currGeometry.paths[0].push([p.x, p.y, p.z]);\n              //   currGraphic = new Graphic({\n              //     geometry: currGeometry,\n              //     symbol: sym\n              //   });\n              //   view.graphics.add(currGraphic);\n              // }\n            });\n\n            map.addMany([trails, trailHeads]);\n            // map.layers.add(labelFeatureLayer);\n        // create map with the given options at a DOM node w/ id 'mapNode'\n        // let map = new Map('mapNode', {\n        //   center: [-118, 34.5],\n        //   zoom: 8,\n        //   basemap: 'dark-gray'\n        // });\n      })\n      .catch(err => {\n        // handle any script or module loading errors\n        console.error(err);\n      });\n  }, [form]);\n  // loadCss();\n  return (\n    <>\n      <div id=\"viewDiv\">\n      </div>\n      <div id=\"overlay\">\n        <form ref={form} onSubmit={handleSubmit}>\n        <div id=\"label\">{`Pick the ${points.length === 0 ? \"start\" : points.length === 1 ? \"end\" : \"ready\"} point (Ctrl-click)`}</div>\n        <button type=\"submit\" className={`btn-submit ${points.length !== 2 ? \"disabled\" : \"\"}`}>\n        Route!\n        </button>\n        <div id=\"start\">\n          <div className=\"label\">\n          Start\n          </div>\n          <div>{`Latitude: ${points[0] ? points[0][0] : \"...\"}, Longitude: ${points[0] ? points[0][1] : \"...\"}`}</div>\n        </div>\n        <div id=\"end\">\n          <div className=\"label\">\n          End\n          </div>\n          <div>{`Latitude: ${points[1] ? points[1][0] : \"...\"}, Longitude: ${points[1] ? points[1][1] : \"...\"}`}</div>\n        </div>\n        </form>\n      </div>\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}